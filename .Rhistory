reset()
reset()
reset()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
reset()
reset()
submit()
quit()
swirl()
library(swirl)
swirl()
33/36
deck
52
1/4
1/13
0
12/52
2/51
.8*1.6*.5
64%
.64
mypdf
mypdf(1.6)
integrate(mypdf,0,1.6)
1/16
2
(.5^2)/4
sqrt(8)
info()
.5
1
2
4
8
16
32
1/4
1/8
1/16
sqrt(2)
.997*.001
0.003*.999
.985*.999
0.003*.985
(1-.985)*.999
(.997*.001)/((1-.985)*.999)
(.997*.001)/((.997*0.001) + (1-.985)*.999)
3.5
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
.5*(edh+edl)
integrate(myfunc,0,2)
spop
mean(spop)
allsam
apply(allsam,1,mean)
mean(smaeans)
mean(smeans)
dice_sqr
dice_fair
dice_high
dice_low
ex2_fair <- sum(dice_fair * dice*sqr)
ex2_fair <- sum(dice_fair * dice_sqr)
3.5^2 - ex2_fair
ex2_fair-3.5^2
edh
sum(dice_high * dice_sqr)-edh^2
sd(apply(matrix(rnorm(10000),1000),1,mean))
1/sqrt(10)
1/sqrt(120)
sd(apply(matrix(runif(10000),1000),1,mean))
2/sqrt(10)
sd(apply(matrix(rpois(10000,4),1000),1,mean))
1/(2*sqrt(10))
sd(apply(matrix(sample(0:1,10000,TRUE),1000),1,mean))
library(swirl)
swirl()
choose(5,3) * (0.8^3) * (0.2^(5-3))
choose(5,3)*(.8^3)*(.2^(5-3))+choose(5,4)*(.8^4)*(.2^(5-4))+choose(5,5)*(.8^5)
pbinom(2,5,.8,lower.tail=FALSE)
qnorm(.1)
0
qnorm(.975,mean=3,sd=2)
3+(2*.975)
1.96*2 + 3
pnorm(q=1200, mean=1020, sd=50, lower.tail=FALSE)
(1200-1020)/50
pnorm((1200-1200)/50, lower.tail=FALSE)
pnorm((1200-1020)/50,lower.tail=FALSE)
qunorm(0.75,mean=1020,sd=50,lower.tail=TRUE)
qnorm(0.75,mean=1020,sd=50,lower.tail=TRUE)
.47
pnorm(qnorm(.53))
.53
ppois(q=3, mean=2.5*4, lower.tail=TRUE, log.p=FALSE)
ppois(q=3, lambda=2.5*4, lower.tail=TRUE, log.p=FALSE)
pbinom(5, 1000, .01)
ppois(5,lambda=1000*.01)
coinPlot(10)
coinPlot(10000)
qnorm(.95)
.6 + c(-1,1) * qnorm(0.975) * sqrt(.6*(1-.6)/100)
.6 + c(-1,1) * qnorm(0.975) * sqrt(.6*.4/100)
x$conf.int
binom.test(60,100)
binom.test(60,100)$conf.int
mywald(.2)
ACCompar(20)
lamb <- 5/94.32
(94.32/5) + c(-1,1) * qnorm(.975) * sqrt(lamb)
lamb+ c(-1,1) * qnorm(.975) * sqrt(lamb/94.32)
poisson.test(5,94.32)$conf
hist(runif(1000))
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(runif(40)))
hist(mns)
hist(rexp(40,0.2))
hist(rexp(1000,0.2))
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(i,0.2)))
hist(mns)
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40,0.2)))
hist(mns)
mns = NULL
for (i in 1 : 100000) mns = c(mns, mean(rexp(40,0.2)))
hist(mns)
names(mns)
lambda <- 0.2
n <- 40
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(n,lambda)))
ggplot(mns, aes(x=i, y=mns)) + geom_lines()
library(ggplot2)
sessionInfo()
ggplot(mns, aes(x=i, y=mns)) + geom_lines()
hist(mns)
mns = NULL
for (i in 1 : 1000) distExp = c(distExp, mean(rexp(n,lambda)))
distExp = NULL
for (i in 1 : 1000) distExp = c(distExp, mean(rexp(n,lambda)))
hist(distExp)
for (i in 1 : 1000) distExp = c(distExp, mean(rexp(n,lambda)))
hist(distExp)
ggplot(distExp, aes(x=distExp, fill=size)) + geom_histogram(binwidth=.3, colour = "black", aes(y = ..density..))
lambda <- 0.2
n <- 40
distExp = NULL
for (i in 1 : 1000) distExp = data.frame(
x = c(distExp, mean(rexp(n,lambda)))
)
lambda <- 0.2
n <- 40
nosim <- 1000
distExp = NULL
for (i in 1 : nosim) {
distExp <- c(distExp, mean(rexp(n,lambda)))
}
hist(distExp)
ggplot(distExp, aes(x=distExp, fill=size)) + geom_histogram(binwidth=.3, colour = "black", aes(y = ..density..))
ggplot(distExp, aes(x=distExp)) + geom_histogram(binwidth=.3, colour = "black", aes(y = ..density..))
for (i in 1 : nosim) {
distExp <- data.frame {
x = c(distExp, mean(rexp(n,lambda)))
}
}
distExp = NULL
for (i in 1 : nosim) {
distExp <- data.frame {
x = c(distExp, mean(rexp(n,lambda)))
}
}
for (i in 1 : nosim) {
distExp <- data.frame(
x = c(distExp, mean(rexp(n,lambda)))
)
}
lambda <- 0.2
n <- 40
nosim <- 3
distExp = NULL
for (i in 1 : nosim) {
distExp <- data.frame(
x = c(distExp, mean(rexp(n,lambda)))
)
}
hist(distExp)
hist(as.numeric(distExp))
lambda <- 0.2
n <- 40
nosim <- 10
distExp = NULL
for (i in 1 : nosim) {
distExp <- data.frame(
x = c(distExp, mean(rexp(n,lambda)))
)
}
hist(as.numeric(distExp))
ggplot(distExp, aes(x=distExp)) + geom_histogram(binwidth=.3, colour = "black", aes(y = ..density..))
lambda <- 0.2
n <- 40
nosim <- 10
distExp = NULL
for (i in 1 : nosim) {
distExp <- data.frame(
x = c(distExp, mean(rexp(n,lambda)))
)
}
hist(as.numeric(distExp))
lambda <- 0.2
n <- 40
nosim <- 1000
distExp = NULL
for (i in 1 : nosim) {
distExp <- data.frame(
x = c(distExp, mean(rexp(n,lambda)))
)
}
hist(mean(rexp(n, lambda)))
hist(rexp(n, lambda))
?apply
hist(distExp=rexp(n, lambda))
hist(rexp(n, lambda))
for (i in 1 : nosim) {
plot(rexp(n, lambda))
)
?rexp
?rep
?qplot
distExp <- data.frame(rexp(n,lambda))
View(distExp)
x <- seq(0,10,0.01)
x <- seq(0,10.0,0.01)
p <- lambda * exp(-lambda*x)
qplot(x, data=dat, fill=p, geom="density", alpha=I(0.5), xlab="x", ylab="p(x)")
qplot(x, data=dat, fill=p, geom="density", alpha=I(0.5), xlab="x", ylab="p(x)")
dat <- data.frame(x=seq(0,10.0,0.01), p=lambda*exp(-lambda*x))
qplot(x, data=dat, fill=p, geom="density", alpha=I(0.5), xlab="x", ylab="p(x)")
dat <- data.frame(x=seq(0,10.0,0.01), p=lambda*exp(-lambda*x))
View(dat)
qplot(x,p, data=dat,geom="density", alpha=I(0.5), xlab="x", ylab="p(x)")
qplot(x,p,data=dat, geom="density", xlab="x", ylab="p(x)")
qplot(x,p,data=dat, geom="line", xlab="x", ylab="p(x)")
dat <- data.frame(x=seq(0,20.0,0.01), p=lambda*exp(-lambda*x))
dat <- data.frame(x=seq(0,20.0,0.01), p=lambda*exp(-lambda*x))
dat <- data.frame(x=seq(0.0,10.0,0.01), p=lambda*exp(-lambda*x))
qplot(x,p,data=dat, geom="line", xlab="x", ylab="p(x)", main="Exponential Distribution")
dat <- data.frame(x=seq(0.0,10.0,0.01), lambda=seq(0.1,1.0,0.1), p=lambda*exp(-lambda*x))
dat <- data.frame(x, lambda, p=lambda*exp(-lambda*x))
x <- seq(0.0,10.0,0.01)
lambda <- seq(0.1,0.5,0.1)
dat <- data.frame(x, lambda, p=lambda*exp(-lambda*x))
qplot(x,p,data=dat,geom="geometry",fill=lambda,xlab="x", ylab="p(x)", main="Exponential Distribution")
x <- seq(0.0,10.0,0.01)
lambda <- seq(0.1,0.5,0.1)
p <- lambda*exp(-lambda*x)
p <- function(x,lambda) lambda*exp(-lambda*x)
dat <- data.frame(x, lambda, p=p(x,lambda))
prob <- p(x,lambda)
dat <- data.frame(x, lambda, prob)
exp_prob1 <- p(x,0.1)
exp_prob2 <- p(x,0.2)
exp_prob3 <- p(x,0.5)
exp_prob3 <- p(x,1.0)
names(exp_prob1) <- "lambda=0.1"
names(exp_prob2) <- "lambda=0.2"
names(exp_prob3) <- "labmda=0.5"
names(exp_prob4) <- "lambda=1.0"
exp_prob2 <- p(x,0.2)
exp_prob3 <- p(x,0.5)
exp_prob4 <- p(x,1.0)
names(exp_prob1) <- "lambda=0.1"
names(exp_prob2) <- "lambda=0.2"
names(exp_prob3) <- "labmda=0.5"
names(exp_prob4) <- "lambda=1.0"
dat <- data.frame(x, exp_prob1, exp_prob2, exp_prob3, exp_prob4)
names(dat) <- c("x","lambda=0.1","lambda=0.2","lambda=0.5","lambda=1.0")
View(dat)
qplot(x,data=dat,geom="density",xlab="x", ylab="p(x)", main="Exponential Distribution")
?rnorm
qplot(x,exp_prob,data=dat,geom="line",xlab="x", ylab="p(x)",main="Exponential Distribution")
x <- seq(0.0,10.0,0.01)
p <- function(x,lambda) lambda*exp(-lambda*x)
exp_prob <- p(x,0.2)
dat <- data.frame(x, exp_prob)
qplot(x,exp_prob,data=dat,geom="line",xlab="x", ylab="p(x)",main="Exponential Distribution")
distExp <- data.frame(rexp(n,lambda))
n <- 40
lambda <- 0.2
n <- 40
nosim <- 1000
distExp = NULL
mean_exp <- 1/lambda
sd_exp <- 1/lambda
# The exponential distribution
x <- seq(0.0,10.0,0.01)
p <- function(x,lambda) lambda*exp(-lambda*x)
exp_prob <- p(x,0.2)
dat <- data.frame(x, exp_prob)
qplot(x,exp_prob,data=dat,geom="line",xlab="x", ylab="p(x)",main="Exponential Distribution")
# The average of 40 exponential distrubtions with lambda = 0.2
distExp <- data.frame(rexp(n,lambda))
ggplot(distExt, aes(exp_prob, fill=exp_prob)) + geom_bar()
ggplot(distExp, aes(exp_prob, fill=exp_prob)) + geom_bar()
distExp <- data.frame(x=rexp(n,lambda))
ggplot(distExp, aes(x, fill=x)) + geom_bar()
hist(distExp)
distExp <- data.frame(x=rexp(n,lambda))
hist(distExp)
distExp <- rexp(n,lambda)
hist(distExp)
print(mean(distExp))
print(sd(distExp))
print(mean(distExp))
print(sd(distExp))
print(1/lambda)
distExp_1000 <- NULL
for (i in 1 : nosim) distExp_1000 = c(distExp_1000, mean(rexp(n,lambda)))
hist(as.numeric(distExp_1000))
?hist
hist(as.numeric(distExp_1000),breaks=20)
hist(as.numeric(distExp_sim),breaks=50)
distExp_sim <- NULL
for (i in 1 : nosim) distExp_sim = c(distExp_sim, mean(rexp(n,lambda)))
hist(as.numeric(distExp_sim),breaks=50)
nosim <- 10000
for (i in 1 : nosim) distExp_sim = c(distExp_sim, mean(rexp(n,lambda)))
hist(as.numeric(distExp_sim),breaks=50)
nosim <- 1000
distExp_sim <- NULL
for (i in 1 : nosim) distExp_sim = c(distExp_sim, mean(rexp(n,lambda)))
hist(as.numeric(distExp_sim),breaks=50,"1000 runs of 40 exponential distributions")
for (i in 1 : nosim) distExp_sim = c(distExp_sim, mean(rexp(n,lambda)))
nosim <- 1000
for (i in 1 : nosim) distExp_sim = c(distExp_sim, mean(rexp(n,lambda)))
hist(as.numeric(distExp_sim),breaks=50,main="1000 runs of 40 exponential distributions")
hist(distExp, main="40 exponential distributions", xlab="value of X")
print(mean(distExp))
print(sd(distExp))
print(1/lambda)
distExp_sim <- NULL
for (i in 1 : nosim) distExp_sim = c(distExp_sim, mean(rexp(n,lambda)))
hist(as.numeric(distExp_sim),breaks=50,main="1000 runs of 40 exponential distributions",xlab="mean of exponential distribution")
print(mean(distExp_sim))
print(sd(distExp_sim))
print(1/lambda)
mean_distExp_sim <- mean(distExp_sim)
?abline
abline(v=mean_distExp_sim)
?abline
abline(v=mean_distExp_sim, col="blue")
abline(v=mean_distExp_sim, col="blue", lty=4)
abline(v=mean_distExp_sim, col="blue", lty=4)
?abline
abline(v=mean_distExp_sim, col="blue", lwd=4)
abline(v=mean_distExp_sim, col="blue", lwd=4, lty=2)
abline(v=mean_distExp_sim, col="blue", lwd=4, lty=2)
abline(v=mean_distExp_sim, col="blue", lwd=4, lty=20)
abline(v=mean_distExp_sim, col="blue", lty=20)
abline(v=mean_distExp_sim, col="blue", lty=20)
hist(as.numeric(distExp_sim),breaks=50,main="1000 runs of 40 exponential distributions",xlab="mean of exponential distribution")
mean_distExp_sim <- mean(distExp_sim)
abline(v=mean_distExp_sim, col="blue", lwd=4, lty=2)
abline(v=mean_distExp_sim, col="blue", lwd=4, lty=20)
hist(as.numeric(distExp_sim),breaks=50,main="1000 runs of 40 exponential distributions",xlab="mean of exponential distribution")
mean_distExp_sim <- mean(distExp_sim)
abline(v=mean_distExp_sim, col="blue", lwd=4, lty=20)
print(mean(distExp_sim))
print(sd(distExp_sim))
qplot(x,exp_prob,data=dat,geom="line",xlab="x", ylab="p(x)",main="Exponential Distribution")
distExp <- rexp(n,lambda)
hist(distExp, main="40 exponential distributions", xlab="value of X")
hist(distExp, main="40 exponential distributions", xlab="value of X", breaks=20)
print(mean(distExp))
print(sd(distExp))
print(1/lambda)
distExp_sim <- NULL
for (i in 1 : nosim) distExp_sim = c(distExp_sim, mean(rexp(n,lambda)))
hist(as.numeric(distExp_sim),breaks=50,main="1000 runs of 40 exponential distributions",xlab="mean of exponential distribution")
mean_distExp_sim <- mean(distExp_sim)
abline(v=mean_distExp_sim, col="blue", lwd=4, lty=20)
print(mean(distExp_sim))
?var
print(var(distExp_sim))
print(mean(distExp_sim))
print(sd(distExp_sim))
# Variance of the simulated exponential distributions
print(var(distExp_sim))
rnorm(5)
?pnorm
print((1/lambda)/sqrt(1000))
CLT_variance <- (1/lambda)/sqrt(1000)
lambda <- 0.2
n <- 40
nosim <- 1000
distExp = NULL
mean_exp <- 1/lambda
sd_exp <- 1/lambda
# The exponential distribution
x <- seq(0.0,10.0,0.01)
p <- function(x,lambda) lambda*exp(-lambda*x)
exp_prob <- p(x,0.2)
dat <- data.frame(x, exp_prob)
qplot(x,exp_prob,data=dat,geom="line",xlab="x", ylab="p(x)",main="Exponential Distribution")
# The average of 40 exponential distrubtions with lambda = 0.2
distExp <- rexp(n,lambda)
hist(distExp, main="40 exponential distributions", xlab="value of X", breaks=20)
print(mean(distExp))
print(sd(distExp))
print(1/lambda)
distExp_sim <- NULL
for (i in 1 : nosim) distExp_sim = c(distExp_sim, mean(rexp(n,lambda)))
hist(as.numeric(distExp_sim),breaks=50,main="1000 runs of 40 exponential distributions",xlab="mean of exponential distribution")
mean_distExp_sim <- mean(distExp_sim)
abline(v=mean_distExp_sim, col="blue", lwd=4, lty=20)
```
## Sample Mean versus Theoretical Mean:
Include figures with titles. In the figures, highlight the means you are comparing. Include text that explains the figures and what is shown on them, and provides appropriate numbers.
```{r}
# mean of 1000 simulated exponential distributions
print(mean(distExp_sim))
```
## Sample Variance versus Theoretical Variance:
With over 1000 simulations performed, sample mean of the simulated exponential distributions approaches the value of 1/lambda.
The sample variance of the simulated exponenital distributions becomes narrower and converges to the theoretical central limit theorem (CLT) values.
```{r}
# Standard deviation of the simulated exponential distributions
print(sd(distExp_sim))
# Variance of the simulated exponential distributions
print(var(distExp_sim))
# Central Limit Theorem Values
CLT_variance <- (1/lambda)/sqrt(1000)
print(CLT_variance)
CLT_variance <- ((1/lambda)^2)/sqrt(1000)
print(CLT_variance)
CLT_variance <- ((1/lambda)^2)/1000
print(CLT_variance)
CLT_variance <- ((1/lambda)^2)/sqrt(1000)
print(CLT_variance)
1.71/sqrt(1000)
(1/lambda)^2)/1000
(1/0.2)^2)/1000
((1/0.2)^2)/1000
print(var(distExp_sim))
print(sd(distExp_sim))
print(sd(distExp_sim))
# The central limit theorem value is defined by sigma^2/sqrt(n)
CLT_sd <- ((1/lambda)^2)/sqrt(1000)
print(CLT_sd)
CLT_sd^2
print(var(distExp_sim))
CLT_sd <- ((1/lambda))/sqrt(1000)
print(CLT_sd)
CLT_sd <- ((1/lambda)^2)/40
print(CLT_sd)
print(sd(distExp_sim))
print(var(distExp_sim))
# The theoretical central limit theorem value is predicted by using the equation sigma^2/n where n=40
CLT_sd <- ((1/lambda)^2)/40
print(CLT_sd)
CLT_sd <- sqrt(((1/lambda)^2)/40)
print(CLT_sd)
print(var(distExp_sim))
print(sd(distExp_sim))
# Standard variance of the simulated exponential distributions
print(var(distExp_sim))
CLT_sd <- (1/lambda)^2)/40
CLT_sd <- ((1/lambda)^2)/40
print(CLT_sd)
print(var(distExp_sim))
# The theoretical central limit theorem value for variance is predicted by using the equation sigma^2/n where n=40
CLT_sd <- ((1/lambda)^2)/40
print(CLT_sd)
CLT_sd <- (1/lambda)/sqrt(40)
print(CLT_sd)
print(var(distExp_sim))
print(sd(distExp_sim))
# The theoretical central limit theorem value for variance is predicted by using the equation sigma/sqrt(n) where n=40
CLT_sd <- (1/lambda)/sqrt(40)
print(CLT_sd)
print(sd(distExp_sim))
CLT_sd <- (1/lambda)/sqrt(1000)
print(CLT_sd)
CLT_sd <- (1/lambda)/sqrt(40)
print(CLT_sd)
print(mean(distExp))
print(sd(distExp))
print((1/lambda)/sqrt(n))
print(1/lambda)
```
```{r}
print(mean(distExp))
print(sd(distExp))
print(1/lambda)
render("StatisticalInferenceSimulation.Rmd", "pdf_document")
library(rmarkdown)
render("StatisticalInferenceSimulation.Rmd", "pdf_document")
setwd("~/Shared/datasciencecoursera/StatisticalInference/CourseProject")
render("StatisticalInferenceSimulation.Rmd", "pdf_document")
render("StatisticalInferenceSimulation.Rmd", "pdf_document")
